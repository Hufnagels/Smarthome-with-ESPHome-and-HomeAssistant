# @file         ledstrip-rgb-1.yaml
# @author   
# @description  leddriver for RGB Led strip with 5050 smd leds
# @version      0.1.1.
# @section      Board 
#   - Wemos D1 mini board
# @section      BOM
#   - Logic-level Mosfet
#     Darlington, transistor array, 0.6A, 50V, 7 channel, DIP16
#     https://www.hqelektronika.hu/reed-swus200v-is05a-ps10w-10mm-uvegcso-hossz-reed-sw-05-10-mf15
#   - 12V to 5V DC Buck converter
#     3A adjustable step-down DC-DC switching power supply module, 1.8V/2.5V/3.3V/5V/9V/12V
#     https://www.hestore.hu/prod_10038725.html
#     Switching step-down converter, 4.5-28V/0.8-20V, 3A
#     https://www.hestore.hu/prod_10038118.html
#   - 20 PIN SEPARATED 0.46/0.6mm
#     https://www.hqelektronika.hu/hu/20-pin-separated-046-06mm-ic-p-20p
# @include  
# @library
# @description
#   5050 smd rgb led strip driver
# @TODO

######################################
# SUBSTITUIONS SECTION
######################################
substitutions:
  device_type: LED-strip
  device_subtype: RGB
  device_number: "1"
  device_name: ledstrip-rgb-${device_number}
  device_group: Lighting
  
  device_location: Kidroom
  device_floor: Ground floor

  unit_name: ""
  parent_device: ""
  child_devices: "{}"
  controlled_device: ""

  <<: !include includes/base/.base.substitutions.yaml

  # MQTT topic prefix for testing
  <<: !include includes/mqtt/.mqtt.topic-prefix.yaml
  # MQTT default topics
  <<: !include includes/mqtt/.mqtt.default-topics.yaml

  # MQTT device specific topics

  # PIN config
  pin_R: D3
  pin_G: D2
  pin_B: D8 
  # Light component id
  light_component_id: rgb_5050_strip

######################################
# ESPHOME SECTION
######################################
esphome:
  # Project/Board definition
  <<: !include includes/base/.base.esphome-definition.yaml
  # Board type
  <<: !include includes/boards/.board.wemos-d1-mini.yaml
  project:
    <<: !include includes/projects/ledstrip-rgb/.versioning.ledstrip-rgb.yaml
  on_boot:
    priority: 200
    then:
      - light.turn_off: ${light_component_id}
      - switch.turn_off: internal_led
  on_shutdown:
    priority: 700
    then:
      - light.turn_off: ${light_component_id}

######################################
# PACKAGES SECTION
######################################
packages:
  mqtt: !include includes/mqtt/.mqtt.base-params.yaml
  text_sensor: !include includes/components/.components.text_sensor.wifi-connection-data.yaml

######################################
# Connection SECTION: wifi, api, ota
######################################
<<: !include includes/base/.base.connection-settings.yaml

logger:
  level: INFO
  
######################################
# HA DATE-TYME SYNC SECTION
######################################
<<: !include includes/ha/.ha.time-sync.yaml

######################################
# MQTT SECTION
######################################
mqtt:
  on_connect:
    - lambda: |-
        ESP_LOGI("separator", "------------------------------------------------------");
        ESP_LOGI("mqtt", "${device_type} ${device_subtype} ${device_number} connected to MQTT");
  on_disconnect:
    - lambda: |-
        ESP_LOGI("separator", "------------------------------------------------------");
        ESP_LOGI("mqtt", "${device_type} ${device_subtype} ${device_number} disconnected from MQTT");
  on_json_message:
    # Central Unit send command for turning ON | OFF Heater
    - topic: ${topic_command}
      then:
        - lambda: |-
            if (x.containsKey("receiver") && x["receiver"] == "${device_name}") {
              if (x["payload"]["command"] == "RESTART" ) {
                ESP_LOGI("separator", "------------------------------------------------------");
                ESP_LOGI("MQTT","RESTART command received");
                id(restart_switch).turn_on();
                //id(CLIMATE_MODE_SET)->execute("OFF");
              }
              
            }

######################################
# LIGHT SECTION
######################################
light:
  - platform: rgb
    id: ${light_component_id}
    name: "${light_component_id} Lights"
    <<: !include { file: includes/mqtt/.mqtt.components-topic-with-command.yaml, vars: { component_type: "light", component_id: "${light_component_id}" } } # inline syntax
    red: output_component_R
    green: output_component_G
    blue: output_component_B
    on_turn_on:
      - lambda: |-
          ESP_LOGI("separator", "------------------------------------------------------");
          ESP_LOGI("light_component", "Light Turned On!");
      - mqtt.publish_json:
            topic: ${topic_basetopic}/state
            payload: |-
              root["sender"] = "${device_type}_${device_subtype}_${device_number}";
              root["receiver"] = "${device_type}_${device_subtype}_${device_number}";
              root["room"] = "${device_location}";
              root["floor"] = "${device_floor}";
              root["payload"]["state"] = "ON";
              root["payload"]["brightness"] = id(${light_component_id})->remote_values.get_brightness() * 255;
              root["payload"]["red"] = id(${light_component_id})->remote_values.get_red() * 255;
              root["payload"]["green"] = id(${light_component_id})->remote_values.get_green() * 255;
              root["payload"]["blue"] = id(${light_component_id})->remote_values.get_blue() * 255;
              root["trigger"] = "light on_turn_on";
              root["timestamp"] = id(homeassistant_time).now().timestamp;
    on_turn_off:
      - lambda: |-
          ESP_LOGI("separator", "------------------------------------------------------");
          ESP_LOGI("light_component", "Light Turned Off!");
      - mqtt.publish_json:
            topic: ${topic_basetopic}/state
            payload: |-
              root["sender"] = "${device_type}_${device_subtype}_${device_number}";
              root["receiver"] = "${device_type}_${device_subtype}_${device_number}";
              root["room"] = "${device_location}";
              root["floor"] = "${device_floor}";
              root["payload"]["state"] = "OFF";
              root["trigger"] = "light on_sturn_off";
              root["timestamp"] = id(homeassistant_time).now().timestamp;
    on_state:
      - lambda: |-
          ESP_LOGI("separator", "------------------------------------------------------");
          ESP_LOGI("light_component", "Light State Changed!");
      - mqtt.publish_json:
            topic: ${topic_basetopic}/state
            payload: |-
              root["sender"] = "${device_type}_${device_subtype}_${device_number}";
              root["receiver"] = "${device_type}_${device_subtype}_${device_number}";
              root["room"] = "${device_location}";
              root["floor"] = "${device_floor}";
              root["payload"]["state"] = "ON";
              root["payload"]["brightness"] = id(${light_component_id})->remote_values.get_brightness() * 255;
              root["payload"]["red"] = id(${light_component_id})->remote_values.get_red() * 255;
              root["payload"]["green"] = id(${light_component_id})->remote_values.get_green() * 255;
              root["payload"]["blue"] = id(${light_component_id})->remote_values.get_blue() * 255;
              root["trigger"] = "light on_state";
              root["timestamp"] = id(homeassistant_time).now().timestamp;
    <<: !include includes/projects/ledstrip-rgb/ledstrip-rgb-effects.yaml
    
######################################
# OUTPUT SECTION
######################################
output:
  - platform: esp8266_pwm
    id: output_component_B
    pin: ${pin_B}
    max_power: 100%
  - platform: esp8266_pwm
    id: output_component_G
    pin: ${pin_G}
    max_power: 100%
  - platform: esp8266_pwm
    id: output_component_R
    pin: ${pin_R}
    max_power: 100%

######################################
# SWITCH SECTION
######################################
switch:
  - platform: restart
    name: "Restart"
    id: restart_switch
  # Internal Led for feedback 
  - platform: gpio
    pin:
      number: D4
      inverted: true
    name: "Internal LED"
    id: internal_led
    restore_mode: RESTORE_DEFAULT_OFF
    <<: !include { file: includes/mqtt/.mqtt.components-topic-with-command.yaml, vars: { component_type: "switch", component_id: "internal_led" } } # inline syntax
    on_turn_on:
      - delay: 10ms
      - switch.turn_off: internal_led

######################################
# BUTTON SECTION
######################################
button:
  <<: !include includes/components/.components.button.restart.yaml
  <<: !include includes/components/.components.button.restart-factory.yaml