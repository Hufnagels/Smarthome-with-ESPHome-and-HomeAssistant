# @file         sensor-gas-meter-1.yaml
# @author       
# @description  Gasmeter with reed switch
# @version      0.1.1.
# @section      Board 
#   - Wemos D1 mini board
# @section  BOM
#   - Reed Sensor
#     REED SW 0.5/10 MF15
#     REED SW.Us:200V Is:0.5A Ps:10W 10mm hossz üvegcső KSK1A87-1520
#     https://www.hqelektronika.hu/reed-swus200v-is05a-ps10w-10mm-uvegcso-hossz-reed-sw-05-10-mf15
#   - Resistor 
#     10kOhm
#     330Ohm
#   - Led 3mm (blue diffuse)
#   - FRAM
#     Adafruit I2C Non-Volatile Ferroelectric Ram Breakout - 256Kbit / 32KByte for 3V or 5V Power and Logic or FRAM
#     https://github.com/adafruit/Fritzing-Library/tree/master/parts
# @include  I2CFram.h
# @library
#   - "Wire"
#   - https://github.com/RobTillaart/FRAM_I2C.git#master
# @description2
#   Measure BK-G4M gasmeter counter pulses 
#   Store measured data to FRAM module
#   Initialize the counter starting value (Globals: initial_gas_value) via MQTT topic smarthome_test/Metering/Hall/Sensor/Gasmeter_1/command , with the following JSON structure
#   {
#     "sender"  : "sensor-gasmeter-1",
#     "receiver": "sensor-gasmeter-1",
#     "room"    : "Hall",
#     "floor"   : "first",
#     "payload" : {
#        "command": "INIT",
#        "init_value" : 9567.47899,
#        "init_impulse" : 0,
#     },
#     "trigger"  : "mqtt on_message",
#     "timestamp": 111222222222
#   }
# @inital settings
#   https://community.home-assistant.io/t/track-a-gas-meter-with-esphome/162669/26
#   BK-4GM 1 imp = 0.01 m³ => 1 / 0.01 = 100 imp / m³
#   Gas Meter Settings
#   gas_imp_value: '100' # impulses / m³ 
#   gas_imp_debounce_on: '0.01 s'
#   gas_imp_debounce_off: '0.1 s'
#   initial_gas_value = xxxx.xx
# @TODO

######################################
# SUBSTITUIONS SECTION
######################################
substitutions:
  device_type: Sensor
  device_subtype: Gasmeter
  device_number: "1"
  device_name: sensor-gasmeter-${device_number}
  device_group: Metering

  device_location: Hall
  device_floor: Ground floor
  
  unit_name: ""
  parent_device: "_"
  child_devices: "{}"
  controlled_device: ""

  <<: !include includes/base/.base.substitutions.yaml

  # MQTT topic prefix for testing
  <<: !include includes/mqtt/.mqtt.topic-prefix.yaml
  # MQTT default topics
  <<: !include includes/mqtt/.mqtt.default-topics.yaml
  # MQTT device specific topics

  # Homeassistant entities for temperature
  <<: !include includes/ha/.ha.entities-temperature.yaml

  # Gasmeter parameters
  <<: !include includes/projects/gasmeter/.params.yaml

######################################
# ESPHOME SECTION
######################################
esphome:
  # Project/Board definition
  <<: !include includes/base/.base.esphome-definition.yaml
  # Board type
  <<: !include includes/boards/.board.wemos-d1-mini.yaml
  project:
    <<: !include includes/projects/gasmeter/.versioning.gas-meter-bk-g4m.yaml
  includes:
    - "includes/projects/gasmeter/i2cfram.h"
  libraries:
    - "Wire"
    #The develop isn't neccesary if version 0.4.3 is released, as of know it is stil in development stage.
    - https://github.com/RobTillaart/FRAM_I2C.git#master
  on_boot:
    priority: -100.0 #800.0
    then:
    - switch.turn_on: measure_control_led_switch
    - script.execute:
        id: on_boot
    #- lambda: |-
    #            writetofram(0x01,0);
  #on_shutdown:
  #  priority: 700.0
  #  then:
  #    - lambda: |-
  #        writetofram(0x04,0);
  #        writetofram(0x03,id(total_gas_value));

######################################
# SCRIPT SECTION
######################################
script:
  - id: on_boot
    then:
      - if:
          condition:
            - lambda: 'return (int)readfromfram(0x01) == 1;'
          then:
            - lambda: |-
                readcounters();
      - if:
          condition:
            - lambda: 'return (int)readfromfram(0x01) == 0;'
          then:
            - lambda: |-
                writetofram(0x01,1);              // state_gasmeter_init
                writetofram(0x02,$gas_init_val);  // initial_gas_value
                writetofram(0x03,$gas_init_val);  // total_gas_value
                writetofram(0x04,0);              // gas_impulses
                readcounters();
  - id: log_values
    then:
      - lambda: |-
          ESP_LOGI("separator", "------------------------------------------------------");
          ESP_LOGI("on_boot", "on_boot read counters from memory module");
          ESP_LOGI("separator", "------------------------------------------------------");
          ESP_LOGI("on_boot",      "state_gasmeter_init  : %f",id(state_gasmeter_init));
          ESP_LOGI("on_boot_fram", "state_gasmeter_init  : %f",readfromfram(0x01));
          ESP_LOGI("separator", "------------------------------------------------------");
          ESP_LOGI("on_boot",      "initial_gas_value    : %.4f",id(initial_gas_value));
          ESP_LOGI("on_boot_fram", "initial_gas_value    : %f",readfromfram(0x02));
          ESP_LOGI("separator", "------------------------------------------------------");
          ESP_LOGI("on_boot",      "total_gas_value      : %.4f",id(total_gas_value));
          ESP_LOGI("on_boot_fram", "total_gas_value      : %f",readfromfram(0x03));
          ESP_LOGI("separator", "------------------------------------------------------");
          ESP_LOGI("on_boot",      "gas_impulses         : %f",id(gas_impulses));
          ESP_LOGI("on_boot_fram", "gas_impulses         : %f",readfromfram(0x04));
          ESP_LOGI("separator", "------------------------------------------------------");

######################################
# INTERVAL SECTION
######################################
interval:
  - interval: 10s
    then:
      - display.page.show_next: mini_oled
      - component.update: mini_oled

######################################
# PACKAGES SECTION
######################################
packages:
  mqtt: !include includes/mqtt/.mqtt.base-params.yaml
  text_sensor: !include includes/components/.components.text_sensor.wifi-connection-data.yaml
  time: !include includes/components/.components.time.ha-time-sync.yaml

######################################
# Connection SECTION: wifi, api, ota
######################################
<<: !include includes/base/.base.connection-settings.yaml

logger:
  level: INFO
  
######################################
# HA DATE-TYME SYNC SECTION
######################################
<<: !include includes/ha/.ha.time-sync.yaml

######################################
# DEEP-SLEEP SECTION
######################################
#deep_sleep:
#  id: deep_sleep_1
#  run_duration: 20s
#  sleep_duration: 5min

######################################
# MQTT SECTION
######################################
mqtt:
  on_connect:
    - lambda: |- 
        id(state_mqtt_connection) = true;
        ESP_LOGI("separator", "------------------------------------------------------");
        ESP_LOGI("mqtt", "${device_type} ${device_subtype} ${device_number} connected to MQTT");
  on_disconnect:
     - lambda: |- 
        id(state_mqtt_connection) = false;
        ESP_LOGI("separator", "------------------------------------------------------");
        ESP_LOGI("mqtt", "${device_type} ${device_subtype} ${device_number} disconnected from MQTT");
  on_json_message:
    # Send command for Initializing the counter starting data
    - topic: smarthome_test/Metering/Hall/Sensor/Gasmeter_1/command
      then:
        - lambda: |-
            if (x.containsKey("receiver") && x["receiver"] == "${device_name}") {
              if (x["payload"]["command"] == "INIT" ) {
                writetofram(0x02,x["payload"]["init_value"]);
                writetofram(0x03,x["payload"]["init_value"]);
                writetofram(0x04,x["payload"]["init_impulse"]);
                writetofram(0x01,1);
                readcounters();
                ESP_LOGI("separator", "------------------------------------------------------");
                ESP_LOGI("mqtt", "INIT command received, values are rereaded.");
              }
              if (x["payload"]["command"] == "RESTART" ) {
                ESP_LOGI("separator", "------------------------------------------------------");
                ESP_LOGI("MQTT","RESTART command received");
                id(restart_switch).turn_on();
              }
            }

######################################
# PIN SECTION
######################################
i2c:
  - id: i2cbus_ssd1306
    sda: D2
    scl: D1
    scan: true
  - id: i2cbus_fram
    sda: D2
    scl: D1
    scan: true

######################################
# GLOBALS SECTION
######################################
globals:
  - id: state_mqtt_connection
    type: bool
    restore_value: false
    initial_value: 'false'
  ######################################
  # Gasmeter initialised? 0: false | 1: true
  ######################################
  - id: state_gasmeter_init           
    type: float
    restore_value: false
  ######################################
  # GAS METER values
  ######################################
  # set the Gasmeter initial value like: 9965.998
  - id: initial_gas_value
    type: float
    restore_value: false 
    #initial_value: '9965.998'
  # measured impulse from rotation with reed switch
  - id: gas_impulses
    type: float
    restore_value: false # if set to false, the value will be 0 at reboot
  ######################################
  # Initial Gas Value incremented with the reed switch count
  # id(total_gas_value) = (id(initial_gas_value) + id(gas_impulses) * (1.0 / ${gas_imp_value}));
    initial_value: '0'
  - id: total_gas_value
    type: float
    restore_value: false
  ######################################
  # Display
  ######################################
  # Display brightness
  - id: brightness           
    type: float
    initial_value: '.1'
    restore_value: false

######################################
# CUSTOM COMPONENT SECTION
# I2C Fram module
######################################
#Enabeling the I2CFram module
custom_component:
  components:
    - id: my_fram
  lambda: |-
      auto my_fram = new MyFram(0x50);
      App.register_component(my_fram);
      return {my_fram};
      
######################################
# BINARY SENSOR SECTION
######################################
binary_sensor:
  # Reed switch impulse
  - platform: gpio
    id: gas_impulse
    internal: true
    <<: !include { file: includes/mqtt/.mqtt.components-topic.yaml, vars: { component_type: "binary_sensor", component_id: "gas_impulse" } } # inline syntax
    pin:
      number: ${gas_read_pin}
      mode: INPUT_PULLUP
      inverted: true
    filters:
      - delayed_off: $gas_imp_debounce_off
    on_press:
      then:
        - lambda: |-
            id(gas_impulses) += 1;
            writetofram(0x04,id(gas_impulses));
        - switch.turn_on: measure_control_led_switch

######################################
# SENSOR SECTION
######################################
sensor:
  # Gas usage m³/min
  - platform: pulse_counter # pulse_meter # pulse_counter #
    name: "Gas usage m³/min"
    id: gas_usage_minute
    unit_of_measurement: 'm³/min'
    internal_filter: $gas_imp_debounce_on
    #timeout: 1 min
    state_class: measurement
    device_class: gas
    icon: mdi:meter-gas-outline
    <<: !include { file: includes/mqtt/.mqtt.components-topic.yaml, vars: { component_type: "sensor", component_id: "gas_usage_minute" } } # inline syntax
    accuracy_decimals: 4
    pin:
      number: ${gas_read_pin}
      mode: INPUT_PULLUP
      inverted: true
    filters: # 1 imp / 0.1 m³ = 10 imp / m³ (in my case); gas_imp_value = 10;
      - lambda: !lambda |-
          ESP_LOGI("separator", "------------------------------------------------------");
          ESP_LOGI("gas_usage_minute", "gas_usage: %d", id(gas_usage_minute)); 
          return x * (1.0 / ${gas_imp_value});

  # Gas usage m³
  - platform: template
    name: "Gas usage m³"
    id: gas_usage_total
    unit_of_measurement: 'm³'
    icon: mdi:meter-gas
    state_class: total_increasing
    device_class: gas
    accuracy_decimals: 4
    update_interval: 10 s
    lambda: return id(gas_impulses) * (1.0 / ${gas_imp_value});
    <<: !include { file: includes/mqtt/.mqtt.components-topic.yaml, vars: { component_type: "sensor", component_id: "gas_usage_total" } } # inline syntax
  
  # Total gas usage m³
  - platform: template
    name: "Total gas usage in m³"
    id: gas_usage_total_on_meter
    unit_of_measurement: 'm³'
    icon: mdi:meter-gas
    state_class: total_increasing
    device_class: gas
    accuracy_decimals: 4
    update_interval: 10 s
    lambda: |-
      id(total_gas_value) = (id(initial_gas_value) + id(gas_impulses) * (1.0 / ${gas_imp_value}));
      writetofram(0x03,id(total_gas_value));
      ESP_LOGI("separator", "------------------------------------------------------");
      ESP_LOGI("gas_usage_total_on_meter", "total_gas_value: %f", id(total_gas_value)); 
      return (id(initial_gas_value) + id(gas_impulses) * (1.0 / ${gas_imp_value}));
    <<: !include { file: includes/mqtt/.mqtt.components-topic.yaml, vars: { component_type: "sensor", component_id: "gas_usage_total_on_meter" } } # inline syntax
  
  ######################################
  #
  - platform: integration
    name: "Total daily Gas usage in m³"
    id: total_daily_gasusage
    sensor: gas_usage_minute
    time_unit: h

time:
  - platform: sntp
    on_time:
      seconds: 0
      minutes: 0
      hours: 0
      then:
        - sensor.integration.reset: total_daily_gasusage

######################################
# SWITCH SECTION
######################################
switch:
  - platform: restart
    name: "Restart"
    id: restart_switch
  ######################################
  # MEASURING CONTROLL LED
  ######################################
  - platform: gpio
    pin: D7
    name: "Measuring control LED"
    id: measure_control_led_switch
    <<: !include { file: includes/mqtt/.mqtt.components-topic-with-command.yaml, vars: { component_type: "switch", component_id: "measure_control_led_switch" } } # inline syntax
    on_turn_on: # MANUAL MODE
      - delay: 100ms
      - switch.turn_off: measure_control_led_switch
      - lambda: |-
          ESP_LOGI("separator", "------------------------------------------------------");
          ESP_LOGI("switch", "Measuring control LED");
          ESP_LOGI("switch", "(int)readfromfram(0x01)   : %i", (int)readfromfram(0x01));
          ESP_LOGI("separator", "------------------------------------------------------");
          ESP_LOGI("switch",      "state_gasmeter_init  : %f",id(state_gasmeter_init));
          ESP_LOGI("switch_fram", "state_gasmeter_init  : %f",readfromfram(0x01));
          ESP_LOGI("separator", "------------------------------------------------------");
          ESP_LOGI("switch",      "initial_gas_value    : %.4f",id(initial_gas_value));
          ESP_LOGI("switch_fram", "initial_gas_value    : %f",readfromfram(0x02));
          ESP_LOGI("separator", "------------------------------------------------------");
          ESP_LOGI("switch",      "total_gas_value      : %.4f",id(total_gas_value));
          ESP_LOGI("switch_fram", "total_gas_value      : %f",readfromfram(0x03));
          ESP_LOGI("separator", "------------------------------------------------------");
          ESP_LOGI("switch",      "gas_impulses         : %f",id(gas_impulses));
          ESP_LOGI("switch_fram", "gas_impulses         : %f",readfromfram(0x04));
          ESP_LOGI("separator", "------------------------------------------------------");

#####################################
# BUTTON SECTION
######################################
button:
  <<: !include includes/components/.components.button.restart.yaml
  <<: !include includes/components/.components.button.restart-factory.yaml


######################################
# FONT SECTION
######################################
font:
  - file: 'fonts/wef.ttf'
    id: font_wef_9
    size: 13
  - file: 'fonts/Roboto-Regular.ttf'
    id: roboto_regular_9
    size: 10

######################################
# 0.96" DISPLAY SECTION
######################################
display:
  - platform: ssd1306_i2c
    model: "SSD1306 64x48"
    i2c_id: i2cbus_ssd1306
    reset_pin: D0
    address: 0x3C
    id: mini_oled
    pages:
      - id: page1
        lambda: |-
          // LINE 1
          // state_gasmeter_init
          it.printf(0, 0, id(roboto_regular_9), "%i", (int)id(state_gasmeter_init));
          // LINE 2
          // initial_gas_value
          it.printf(0, 15, id(roboto_regular_9), "%.5f", id(initial_gas_value));
          // LINE 3
          // total_gas_value
          it.printf(0, 26, id(roboto_regular_9), "%.5f", id(total_gas_value));
          // LINE 4
          // gas_impulses
          it.printf(0, 37, id(roboto_regular_9), "%.5f", id(gas_impulses));
      - id: page2
        lambda: |-
          // LINE 2
          // MQTT state
          it.print(0, 13, id(roboto_regular_9), id(state_mqtt_connection) ? "CONNECTED":"DISCONNECTED");
          // LINE 3
          // Print time in HH:MM format
          it.strftime(63, 26, id(roboto_regular_9), TextAlign::RIGHT, "%H:%M", id(homeassistant_time).now());
          // LINE 4
          // Print date in YYYY.MM.DD format
          it.strftime(63, 37, id(roboto_regular_9), TextAlign::RIGHT, "%Y.%m.%d", id(homeassistant_time).now());
